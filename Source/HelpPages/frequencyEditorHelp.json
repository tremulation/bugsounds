{
    "pageTitle": "Frequency Editor",
    "content": [
        {
            "type": "subheader",
            "text": "Introduction"
        },
        {
            "type": "text",
            "content": "Uses a notation language called clickCode (like sheet music for bugs) to describe a bug song. It is designed to capture all possible insect songs. The frequency editor is compiled first, and then the resonator editor is compiled, using any variables set in the frequency editor. Every element is separated from the next by a comma. \n\nAll clickCode songs are compiled into a list of notes and patterns. to compile the code in both resonators, hit the \"Play song from code\" button at the bottom of the synth. "
        },
        {
            "type": "subheader",
            "text": "Syntax"
        },
        {
            "type": "text",
            "content": "- Note: a pair of values of the form: \"frequency(Hz) length(ms)\", separated by commas. The frequency specifies the ending frequency, so each note starts at the last note's ending frequency. At the start of a song, the frequency is 0. \n\tEX: 120 1000, 0 1000: go from 0 clicks a second to 120 in 1 second, and then go from 120 clicks to 0 in 1 second. \n\n- Beat Pattern: pattern(x y z). Change the beat allocation pattern.\t\n\tEX: 120 1, [120 500, 240 500] 2, 0 500\n\t- The default pattern is just one note per beat every beat (which can be\n\t  expressed like this: pattern(1). \n\t- You could also tell it to skip every third beat like this: pattern(1 1 0).\n\t- If you wanted to play two eighth-notes, and then 3 normal beats, you could \n\t  express that like this: pattern(2 1 1 1)\n\t- the numbers within a pattern block can also be randomized with rand. \n\n- Loop [note1 note2 note3] iterations. Any number of components, surrounded by a \"[]\" followed by a number of iterations at the end. \n\t- loops with fractions are rounded down. \n\n- Var: store a value in a variable and use it later. Variables are shared between the two clickCode editors, so you can use them for synchronization\n\tEX: \n\t- creation: let a = 1000 * (rand 1 10), let b = 1000 \n\t- use : rand(a b) 1000, 100 a, b 20, let c = a + b\n\n- Binary Operators:can be used on numbers, results of rands, variables, etc. add (+), sub (-), multiply (*), and divide (/). \n\t- always evaluates down to a single number.\n\n- Randomize: Any number from the previous components can be replaced with a rand(min max) which will generate a random number between the range\n\t- works on both numbers in a pair (freq, length), as well as loop iterations, where it will be rounded down\n\n- Comments: surround them with dollar signs. EX: $ like this $  "
        },
        {
            "type": "subheader",
            "text": "Tips"
        },
        {
            "type": "text",
            "content": "- use zero-length notes to skip the smooth frequency transition from one note to another.\n- patterns are the most important part of making a song sound \"buglike\". \n- The loops are basically a hack for sticking an LFO into an envelope"
        }
    ]
}